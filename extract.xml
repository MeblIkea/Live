
<Property>Live.RackDevice.RackDevice._live_ptr<Description>Property</Description></Property>

<Property>Live.RackDevice.RackDevice.can_have_chains<Description>Property</Description></Property>

<Doc>	Returns true if the device is a rack.</Doc>

<Property>Live.RackDevice.RackDevice.can_have_drum_pads<Description>Property</Description></Property>

<Doc>	Returns true if the device is a drum rack.</Doc>

<Property>Live.RackDevice.RackDevice.can_show_chains<Description>Property</Description></Property>

<Doc>	return True, if this Rack contains a rack instrument device that is capable of showing its chains in session view.</Doc>

<Property>Live.RackDevice.RackDevice.canonical_parent<Description>Property</Description></Property>

<Doc>	Get the canonical parent of the Device.</Doc>

<Property>Live.RackDevice.RackDevice.chains<Description>Property</Description></Property>

<Doc>	Return const access to the list of chains in this device. Throws an exception if can_have_chains is false.</Doc>

<Property>Live.RackDevice.RackDevice.class_display_name<Description>Property</Description></Property>

<Doc>	Return const access to the name of the device's class name as displayed in Live's browser and device chain</Doc>

<Property>Live.RackDevice.RackDevice.class_name<Description>Property</Description></Property>

<Doc>	Return const access to the name of the device's class.</Doc>

<Property>Live.RackDevice.RackDevice.drum_pads<Description>Property</Description></Property>

<Doc>	Return const access to the list of drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc>

<Property>Live.RackDevice.RackDevice.has_drum_pads<Description>Property</Description></Property>

<Doc>	Returns true if the device is a drum rack which has drum pads. Throws an exception if can_have_drum_pads is false.</Doc>

<Property>Live.RackDevice.RackDevice.has_macro_mappings<Description>Property</Description></Property>

<Doc>	Returns true if any of the rack's macros are mapped to a parameter.</Doc>

<Property>Live.RackDevice.RackDevice.is_active<Description>Property</Description></Property>

<Doc>	Return const access to whether this device is active. This will be false bothwhen the device is off and when it's inside a rack device which is off.</Doc>

<Property>Live.RackDevice.RackDevice.is_showing_chains<Description>Property</Description></Property>

<Doc>	Returns True, if it is showing chains.</Doc>

<Property>Live.RackDevice.RackDevice.macros_mapped<Description>Property</Description></Property>

<Doc>	A list of booleans, one for each macro parameter, which is True iffthat macro is mapped to something</Doc>

<Property>Live.RackDevice.RackDevice.name<Description>Property</Description></Property>

<Doc>	Return access to the name of the device.</Doc>

<Property>Live.RackDevice.RackDevice.parameters<Description>Property</Description></Property>

<Doc>	Const access to the list of available automatable parameters for this device.</Doc>

<Property>Live.RackDevice.RackDevice.return_chains<Description>Property</Description></Property>

<Doc>	Return const access to the list of return chains in this device. Throws an exception if can_have_chains is false.</Doc>

<Property>Live.RackDevice.RackDevice.selected_variation_index<Description>Property</Description></Property>

<Doc>	Access to the index of the currently selected macro variation.Throws an exception if the index is out of range.</Doc>

<Property>Live.RackDevice.RackDevice.type<Description>Property</Description></Property>

<Doc>	Return the type of the device.</Doc>

<Property>Live.RackDevice.RackDevice.variation_count<Description>Property</Description></Property>

<Doc>	Access to the number of macro variations currently stored.</Doc>

<Property>Live.RackDevice.RackDevice.view<Description>Property</Description></Property>

<Doc>	Representing the view aspects of a device.</Doc>

<Property>Live.RackDevice.RackDevice.visible_drum_pads<Description>Property</Description></Property>

<Doc>	Return const access to the list of visible drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc>

<Method>Live.RackDevice.RackDevice.add_chains_listener()<Description>Method</Description></Method>

<Doc>	add_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "chains" has changed. C++ signature :  void add_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	add_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "drum_pads" has changed. C++ signature :  void add_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_has_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	add_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_drum_pads" has changed. C++ signature :  void add_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_has_macro_mappings_listener()<Description>Method</Description></Method>

<Doc>	add_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "has_macro_mappings" has changed. C++ signature :  void add_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_is_active_listener()<Description>Method</Description></Method>

<Doc>	add_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_active" has changed. C++ signature :  void add_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_is_showing_chains_listener()<Description>Method</Description></Method>

<Doc>	add_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "is_showing_chains" has changed. C++ signature :  void add_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_macro()<Description>Method</Description></Method>

<Doc>	add_macro( (RackDevice)arg1) -&gt; None : Increases the number of visible macro controls in the rack. Throws an exception if the maximum number of macro controls is reached. C++ signature :  void add_macro(TRackDevicePyHandle)</Doc>

<Method>Live.RackDevice.RackDevice.add_macros_mapped_listener()<Description>Method</Description></Method>

<Doc>	add_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "macros_mapped" has changed. C++ signature :  void add_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_name_listener()<Description>Method</Description></Method>

<Doc>	add_name_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "name" has changed. C++ signature :  void add_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_parameters_listener()<Description>Method</Description></Method>

<Doc>	add_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "parameters" has changed. C++ signature :  void add_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_return_chains_listener()<Description>Method</Description></Method>

<Doc>	add_return_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "return_chains" has changed. C++ signature :  void add_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.add_visible_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	add_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Add a listener function or method, which will be called as soon as the property "visible_drum_pads" has changed. C++ signature :  void add_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.chains_has_listener()<Description>Method</Description></Method>

<Doc>	chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "chains". C++ signature :  bool chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.copy_pad()<Description>Method</Description></Method>

<Doc>	copy_pad( (RackDevice)arg1, (int)arg2, (int)arg3) -&gt; None : Copies all contents of a drum pad from a source pad into a destination pad. copy_pad(source_index, destination_index) where source_index and destination_index correspond to the note number/index of the drum pad in a drum rack. Throws an exception when the source pad is empty, or when the source or destination indices are not between 0 - 127. C++ signature :  void copy_pad(TRackDevicePyHandle,int,int)</Doc>

<Method>Live.RackDevice.RackDevice.delete_selected_variation()<Description>Method</Description></Method>

<Doc>	delete_selected_variation( (Device)arg1) -&gt; None : Deletes the currently selected macro variation.Does nothing if there is no selected variation. C++ signature :  void delete_selected_variation(TPyHandle&lt;ADevice&gt;)</Doc>

<Method>Live.RackDevice.RackDevice.drum_pads_has_listener()<Description>Method</Description></Method>

<Doc>	drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "drum_pads". C++ signature :  bool drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.has_drum_pads_has_listener()<Description>Method</Description></Method>

<Doc>	has_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_drum_pads". C++ signature :  bool has_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.has_macro_mappings_has_listener()<Description>Method</Description></Method>

<Doc>	has_macro_mappings_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "has_macro_mappings". C++ signature :  bool has_macro_mappings_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.is_active_has_listener()<Description>Method</Description></Method>

<Doc>	is_active_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_active". C++ signature :  bool is_active_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.is_showing_chains_has_listener()<Description>Method</Description></Method>

<Doc>	is_showing_chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "is_showing_chains". C++ signature :  bool is_showing_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.macros_mapped_has_listener()<Description>Method</Description></Method>

<Doc>	macros_mapped_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "macros_mapped". C++ signature :  bool macros_mapped_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.name_has_listener()<Description>Method</Description></Method>

<Doc>	name_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "name". C++ signature :  bool name_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.parameters_has_listener()<Description>Method</Description></Method>

<Doc>	parameters_has_listener( (Device)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "parameters". C++ signature :  bool parameters_has_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.randomize_macros()<Description>Method</Description></Method>

<Doc>	randomize_macros( (RackDevice)arg1) -&gt; None : Randomizes the values for all macro controls not excluded from randomization. C++ signature :  void randomize_macros(TRackDevicePyHandle)</Doc>

<Method>Live.RackDevice.RackDevice.recall_last_used_variation()<Description>Method</Description></Method>

<Doc>	recall_last_used_variation( (Device)arg1) -&gt; None : Recalls the macro variation that was recalled most recently.Does nothing if no variation has been recalled yet. C++ signature :  void recall_last_used_variation(TPyHandle&lt;ADevice&gt;)</Doc>

<Method>Live.RackDevice.RackDevice.recall_selected_variation()<Description>Method</Description></Method>

<Doc>	recall_selected_variation( (Device)arg1) -&gt; None : Recalls the currently selected macro variation.Does nothing if there are no variations. C++ signature :  void recall_selected_variation(TPyHandle&lt;ADevice&gt;)</Doc>

<Method>Live.RackDevice.RackDevice.remove_chains_listener()<Description>Method</Description></Method>

<Doc>	remove_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "chains". C++ signature :  void remove_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	remove_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "drum_pads". C++ signature :  void remove_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_has_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	remove_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_drum_pads". C++ signature :  void remove_has_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_has_macro_mappings_listener()<Description>Method</Description></Method>

<Doc>	remove_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "has_macro_mappings". C++ signature :  void remove_has_macro_mappings_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_is_active_listener()<Description>Method</Description></Method>

<Doc>	remove_is_active_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_active". C++ signature :  void remove_is_active_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_is_showing_chains_listener()<Description>Method</Description></Method>

<Doc>	remove_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "is_showing_chains". C++ signature :  void remove_is_showing_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_macro()<Description>Method</Description></Method>

<Doc>	remove_macro( (RackDevice)arg1) -&gt; None : Decreases the number of visible macro controls in the rack. Throws an exception if the minimum number of macro controls is reached. C++ signature :  void remove_macro(TRackDevicePyHandle)</Doc>

<Method>Live.RackDevice.RackDevice.remove_macros_mapped_listener()<Description>Method</Description></Method>

<Doc>	remove_macros_mapped_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "macros_mapped". C++ signature :  void remove_macros_mapped_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_name_listener()<Description>Method</Description></Method>

<Doc>	remove_name_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "name". C++ signature :  void remove_name_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_parameters_listener()<Description>Method</Description></Method>

<Doc>	remove_parameters_listener( (Device)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "parameters". C++ signature :  void remove_parameters_listener(TPyHandle&lt;ADevice&gt;,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_return_chains_listener()<Description>Method</Description></Method>

<Doc>	remove_return_chains_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "return_chains". C++ signature :  void remove_return_chains_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.remove_visible_drum_pads_listener()<Description>Method</Description></Method>

<Doc>	remove_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) -&gt; None : Remove a previously set listener function or method from property "visible_drum_pads". C++ signature :  void remove_visible_drum_pads_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.return_chains_has_listener()<Description>Method</Description></Method>

<Doc>	return_chains_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "return_chains". C++ signature :  bool return_chains_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>

<Method>Live.RackDevice.RackDevice.store_chosen_bank()<Description>Method</Description></Method>

<Doc>	store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) -&gt; None : Set the selected bank in the device for persistency. C++ signature :  void store_chosen_bank(TPyHandle&lt;ADevice&gt;,int,int)</Doc>

<Method>Live.RackDevice.RackDevice.store_variation()<Description>Method</Description></Method>

<Doc>	store_variation( (Device)arg1) -&gt; None : Stores a new variation of the values of all currently mapped macros C++ signature :  void store_variation(TPyHandle&lt;ADevice&gt;)</Doc>

<Method>Live.RackDevice.RackDevice.visible_drum_pads_has_listener()<Description>Method</Description></Method>

<Doc>	visible_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) -&gt; bool : Returns true, if the given listener function or method is connected to the property "visible_drum_pads". C++ signature :  bool visible_drum_pads_has_listener(TRackDevicePyHandle,boost::python::api::object)</Doc>
